<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>@t2ee</title>
  <subtitle>Typescript To Enterprise Edition</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.t2ee.org/"/>
  <updated>2017-08-04T10:14:38.000Z</updated>
  <id>https://blog.t2ee.org/</id>
  
  <author>
    <name>Qiaosen Huang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Tutorial Series (1): A Simple Todo List Api Server (1)</title>
    <link href="https://blog.t2ee.org/2017/08/04/A-Simple-Todo-List-Api-Server-1/"/>
    <id>https://blog.t2ee.org/2017/08/04/A-Simple-Todo-List-Api-Server-1/</id>
    <published>2017-08-04T06:59:13.000Z</published>
    <updated>2017-08-04T10:14:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="First-of-all"><a href="#First-of-all" class="headerlink" title="First of all"></a>First of all</h1><p>This is the first project of the <a href="/tags/tutorials">Tutorial Serires</a>.</p>
<p>For this project, we will be building a simple TODO list api server, with CRUD abilities.<br>You can download the source code at <a href="https://github.com/t2ee/tutorial-series-1" target="_blank" rel="external">https://github.com/t2ee/tutorial-series-1</a></p>
<h1 id="Preperation"><a href="#Preperation" class="headerlink" title="Preperation"></a>Preperation</h1><p>To get our hands sweaty, first we need to setup some basic dependencies and environment.</p>
<p><code>npm i typescript reflect-metadata @t2ee/core @t2ee/sl4js @t2ee/validation @t2ee/vdaer koa@2</code></p>
<p>These are all the packages we are gonna be using for this tutorial. also don’t forget to create a <code>tsconfig.json</code>, with <code>experimentalDecorators</code> and <code>emitDecoratorMetadata</code> enabled.</p>
<p>If you do not already have one or not familar with <code>typescript</code> yet, following is an good start.</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"compilerOptions"</span>: &#123;</div><div class="line">        <span class="attr">"module"</span>: <span class="string">"commonjs"</span>,</div><div class="line">        <span class="attr">"outDir"</span>: <span class="string">"./dist"</span>,</div><div class="line">        <span class="attr">"target"</span>: <span class="string">"ES6"</span>,</div><div class="line">        <span class="attr">"experimentalDecorators"</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">"emitDecoratorMetadata"</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">"declaration"</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">"sourceMap"</span>: <span class="literal">true</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"compileOnSave"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">"include"</span>: [</div><div class="line">        <span class="string">"src/**/*.ts"</span></div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Objectives"><a href="#Objectives" class="headerlink" title="Objectives"></a>Objectives</h1><p>For the first part of this tutorial, we are building two routes first. <code>GET /todo</code> and <code>GET /todo/:id</code>. </p>
<p>The first one will return the list of all todo items, and the second returns an item that matches the id.</p>
<h1 id="Bootstrap-the-project"><a href="#Bootstrap-the-project" class="headerlink" title="Bootstrap the project"></a>Bootstrap the project</h1><p>First, let’s prepare <code>logger.yaml</code>, which will be read by <code>@t2ee/sl4js</code> to configure loggers and formats.</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="attr">default:</span> <span class="string">console</span> </div><div class="line"><span class="attr">level:</span> <span class="string">LogLevel.DEBUG</span></div><div class="line"><span class="attr">appenders:</span></div><div class="line"><span class="attr">  - name:</span> <span class="string">console</span></div><div class="line"><span class="attr">    appender:</span> <span class="string">console</span></div><div class="line"><span class="attr">    pattern:</span> <span class="string">'%d&#123;YYYY-MM-DD HH:mm:ss.SSS&#125; %-7c&#123;[%l]&#125; %10n %5p - %2w  %M'</span></div><div class="line"><span class="attr">    level:</span> <span class="string">LogLevel.DEBUG</span></div></pre></td></tr></table></figure>
<p>To move on with this tutorial, we will not be discussing the details of loggin configurations here today, other tutorials will be covering it.</p>
<p>Now, let’s code our controller, which will be responsible how requests are handled.</p>
<p>First import all components we will be using.</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">    GET,</div><div class="line">    Path,</div><div class="line">    Response,</div><div class="line">    PathParam,</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'@t2ee/vader'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">    Component,</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'@t2ee/core'</span>;</div></pre></td></tr></table></figure>
<p><code>@GET</code> and <code>@Path</code> define routes. Response is the object you will be returning at the end of request. <code>@PathParam</code> is used to acquire parameters in path. <code>@Component</code> needs to be added to class to trigger bindings, otherwise, none of the above would work.</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Path</span>(<span class="string">'/todo'</span>)</div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> Controller &#123;</div><div class="line">    <span class="meta">@GET</span></div><div class="line">    <span class="meta">@Path</span>(<span class="string">'/'</span>)</div><div class="line">    <span class="keyword">async</span> getList(): <span class="built_in">Promise</span>&lt;Response&gt; &#123;</div><div class="line">        <span class="keyword">const</span> response = <span class="keyword">new</span> Response();</div><div class="line">        response.body = LIST;</div><div class="line">        <span class="keyword">return</span> response;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>let’s also define a local variable to store todo items in memory.<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> LIST = [&#123;</div><div class="line">    id: <span class="number">0</span>,</div><div class="line">    name: <span class="string">'a'</span>,</div><div class="line">&#125;, &#123;</div><div class="line">    id: <span class="number">1</span>,</div><div class="line">    name: <span class="string">'b'</span>,</div><div class="line">&#125;];</div></pre></td></tr></table></figure></p>
<p>So now we have our class and first route. </p>
<p>In order to run the controller, we also need to have an entry file to register our controller into the router, see <a href="#index-ts">index.ts</a></p>
<p>Now run <code>tsc -p tsconfig.json &amp;&amp; node dist</code>, this will compile all the source codes and start the server.</p>
<p>You should be able to see something like below</p>
<p><img src="/1.png" alt=""></p>
<h1 id="All-together"><a href="#All-together" class="headerlink" title="All together"></a>All together</h1><h2 id="index-ts"><a href="#index-ts" class="headerlink" title="index.ts"></a>index.ts</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">'reflect-metadata'</span>;</div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> path <span class="keyword">from</span> <span class="string">'path'</span>;</div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Koa <span class="keyword">from</span> <span class="string">'koa'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">    ConfigurationStore,</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'@t2ee/core'</span>;</div><div class="line">ConfigurationStore.loadFile(path.resolve(__dirname, <span class="string">'../logger'</span>));</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">    Router,</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'@t2ee/vader'</span>;</div><div class="line"><span class="keyword">import</span> Controller <span class="keyword">from</span> <span class="string">'./controller'</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">const</span> router = Router.newInstance();</div><div class="line">router.use(Controller);</div><div class="line"></div><div class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</div><div class="line">app.use(router.routes());</div><div class="line">app.listen(<span class="number">8080</span>);</div></pre></td></tr></table></figure>
<h2 id="logger-yaml"><a href="#logger-yaml" class="headerlink" title="logger.yaml"></a>logger.yaml</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="attr">default:</span> <span class="string">console</span> </div><div class="line"><span class="attr">level:</span> <span class="string">LogLevel.DEBUG</span></div><div class="line"><span class="attr">appenders:</span></div><div class="line"><span class="attr">  - name:</span> <span class="string">console</span></div><div class="line"><span class="attr">    appender:</span> <span class="string">console</span></div><div class="line"><span class="attr">    pattern:</span> <span class="string">'%d&#123;YYYY-MM-DD HH:mm:ss.SSS&#125; %-7c&#123;[%l]&#125; %10n %5p - %2w  %M'</span></div><div class="line"><span class="attr">    level:</span> <span class="string">LogLevel.DEBUG</span></div></pre></td></tr></table></figure>
<h2 id="controller-ts"><a href="#controller-ts" class="headerlink" title="controller.ts"></a>controller.ts</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">    GET,</div><div class="line">    Path,</div><div class="line">    Response,</div><div class="line">    PathParam,</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'@t2ee/vader'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">    Component,</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'@t2ee/core'</span>;</div><div class="line"></div><div class="line"><span class="keyword">let</span> LIST = [&#123;</div><div class="line">    id: <span class="number">0</span>,</div><div class="line">    name: <span class="string">'a'</span>,</div><div class="line">&#125;, &#123;</div><div class="line">    id: <span class="number">1</span>,</div><div class="line">    name: <span class="string">'b'</span>,</div><div class="line">&#125;];</div><div class="line"></div><div class="line"><span class="meta">@Path</span>(<span class="string">'/todo'</span>)</div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> Controller &#123;</div><div class="line">    <span class="meta">@GET</span></div><div class="line">    <span class="meta">@Path</span>(<span class="string">'/'</span>)</div><div class="line">    <span class="keyword">async</span> getList(): <span class="built_in">Promise</span>&lt;Response&gt; &#123;</div><div class="line">        <span class="keyword">const</span> response = <span class="keyword">new</span> Response();</div><div class="line">        response.body = LIST;</div><div class="line">        <span class="keyword">return</span> response;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@GET</span></div><div class="line">    <span class="meta">@Path</span>(<span class="string">'/:id'</span>)</div><div class="line">    <span class="keyword">async</span> getItem(<span class="meta">@PathParam</span>(<span class="string">'id'</span>) id) &#123;</div><div class="line">        id = <span class="built_in">parseInt</span>(id);</div><div class="line">        <span class="keyword">const</span> item = LIST.find(<span class="function"><span class="params">todo</span> =&gt;</span> todo.id === id);</div><div class="line">        <span class="keyword">if</span> (item) &#123;</div><div class="line">            <span class="keyword">const</span> response = <span class="keyword">new</span> Response();</div><div class="line">            response.body = item;</div><div class="line">            <span class="keyword">return</span> response;    </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;First-of-all&quot;&gt;&lt;a href=&quot;#First-of-all&quot; class=&quot;headerlink&quot; title=&quot;First of all&quot;&gt;&lt;/a&gt;First of all&lt;/h1&gt;&lt;p&gt;This is the first project of t
    
    </summary>
    
    
      <category term="tutorials" scheme="https://blog.t2ee.org/tags/tutorials/"/>
    
      <category term="A Simple Todo List Api Server" scheme="https://blog.t2ee.org/tags/A-Simple-Todo-List-Api-Server/"/>
    
  </entry>
  
</feed>
